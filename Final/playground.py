import numpy as np
import matplotlib.pyplot as plt

#################
# generating data

# The row player is player 1, the column player is player 2

# This is the payoff matrix for player 1 in rock paper (super) scissors.
U_rps = np.array([[0, -1, 1], [1, 0, -2], [-1, 2, 0]])

# This is the payoff matrix for player 1 in Kuhn poker.
U_kuhn = np.array([
    [+0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, -3.33e-01, -3.33e-01, +0.00e+00, +0.00e+00, -3.33e-01, -3.33e-01, +0.00e+00, +0.00e+00, -3.33e-01, -3.33e-01, +0.00e+00, +0.00e+00, -3.33e-01, -3.33e-01, +0.00e+00, +0.00e+00, -3.33e-01, -3.33e-01, +0.00e+00, +0.00e+00, -3.33e-01, -3.33e-01, +0.00e+00, +0.00e+00, -3.33e-01, -3.33e-01, +0.00e+00, +0.00e+00, -3.33e-01, -3.33e-01, +0.00e+00, +0.00e+00, ],
    [+0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, ],
    [+0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, ],
    [+0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, -8.33e-01, -8.33e-01, -1.00e+00, -1.00e+00, -8.33e-01, -8.33e-01, -1.00e+00, -1.00e+00, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, -8.33e-01, -8.33e-01, -1.00e+00, -1.00e+00, -8.33e-01, -8.33e-01, -1.00e+00, -1.00e+00, ],
    [+0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, -5.00e-01, -5.00e-01, -1.17e+00, -1.17e+00, -5.00e-01, -5.00e-01, -1.17e+00, -1.17e+00, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, -5.00e-01, -5.00e-01, -1.17e+00, -1.17e+00, -5.00e-01, -5.00e-01, -1.17e+00, -1.17e+00, -1.67e-01, -1.67e-01, -8.33e-01, -8.33e-01, -1.67e-01, -1.67e-01, -8.33e-01, -8.33e-01, -6.67e-01, -6.67e-01, -1.33e+00, -1.33e+00, -6.67e-01, -6.67e-01, -1.33e+00, -1.33e+00, -1.67e-01, -1.67e-01, -8.33e-01, -8.33e-01, -1.67e-01, -1.67e-01, -8.33e-01, -8.33e-01, -6.67e-01, -6.67e-01, -1.33e+00, -1.33e+00, -6.67e-01, -6.67e-01, -1.33e+00, -1.33e+00, ],
    [+0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, -5.00e-01, -6.67e-01, -8.33e-01, -1.00e+00, -5.00e-01, -6.67e-01, -8.33e-01, -1.00e+00, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, -5.55e-17, -1.67e-01, -3.33e-01, -5.00e-01, -5.55e-17, -1.67e-01, -3.33e-01, -5.00e-01, -1.67e-01, -3.33e-01, -5.00e-01, -6.67e-01, -1.67e-01, -3.33e-01, -5.00e-01, -6.67e-01, -6.67e-01, -8.33e-01, -1.00e+00, -1.17e+00, -6.67e-01, -8.33e-01, -1.00e+00, -1.17e+00, +3.33e-01, +1.67e-01, -5.55e-17, -1.67e-01, +3.33e-01, +1.67e-01, -5.55e-17, -1.67e-01, -1.67e-01, -3.33e-01, -5.00e-01, -6.67e-01, -1.67e-01, -3.33e-01, -5.00e-01, -6.67e-01, ],
    [+3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, -1.67e-01, -3.33e-01, ],
    [+3.33e-01, +1.67e-01, -2.78e-17, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, +3.33e-01, +1.67e-01, -2.78e-17, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, +1.67e-01, -5.55e-17, -1.67e-01, -3.33e-01, -5.55e-17, -1.67e-01, -3.33e-01, -5.00e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, -1.67e-01, -3.33e-01, -5.00e-01, -6.67e-01, +1.67e-01, -5.55e-17, -1.67e-01, -3.33e-01, -5.55e-17, -1.67e-01, -3.33e-01, -5.00e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, -1.67e-01, -3.33e-01, -5.00e-01, -6.67e-01, ],
    [+3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, +1.67e-01, -1.67e-01, +1.67e-01, -1.67e-01, +1.67e-01, -1.67e-01, +1.67e-01, -1.67e-01, +0.00e+00, -3.33e-01, +0.00e+00, -3.33e-01, +8.33e-01, +5.00e-01, +8.33e-01, +5.00e-01, +6.67e-01, +3.33e-01, +6.67e-01, +3.33e-01, +6.67e-01, +3.33e-01, +6.67e-01, +3.33e-01, +5.00e-01, +1.67e-01, +5.00e-01, +1.67e-01, +1.67e-01, -1.67e-01, +1.67e-01, -1.67e-01, +0.00e+00, -3.33e-01, +0.00e+00, -3.33e-01, +1.11e-16, -3.33e-01, +1.11e-16, -3.33e-01, -1.67e-01, -5.00e-01, -1.67e-01, -5.00e-01, +6.67e-01, +3.33e-01, +6.67e-01, +3.33e-01, +5.00e-01, +1.67e-01, +5.00e-01, +1.67e-01, +5.00e-01, +1.67e-01, +5.00e-01, +1.67e-01, +3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, ],
    [+0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +1.67e-01, +1.67e-01, +5.00e-01, +5.00e-01, +1.67e-01, +1.67e-01, +5.00e-01, +5.00e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +0.00e+00, +0.00e+00, +3.33e-01, +3.33e-01, +1.67e-01, +1.67e-01, +5.00e-01, +5.00e-01, +1.67e-01, +1.67e-01, +5.00e-01, +5.00e-01, -1.67e-01, -1.67e-01, +1.67e-01, +1.67e-01, -1.67e-01, -1.67e-01, +1.67e-01, +1.67e-01, -5.55e-17, -5.55e-17, +3.33e-01, +3.33e-01, -5.55e-17, -5.55e-17, +3.33e-01, +3.33e-01, -1.67e-01, -1.67e-01, +1.67e-01, +1.67e-01, -1.67e-01, -1.67e-01, +1.67e-01, +1.67e-01, -5.55e-17, -5.55e-17, +3.33e-01, +3.33e-01, -5.55e-17, -5.55e-17, +3.33e-01, +3.33e-01, ],
    [+0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, ],
    [+0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, ],
    [+0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, ],
    [+0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, -3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, -3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, -3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, -3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, -3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, -3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, -3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, -3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, ],
    [+0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, -3.33e-01, -5.00e-01, -6.67e-01, -8.33e-01, -3.33e-01, -5.00e-01, -6.67e-01, -8.33e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, -3.33e-01, -5.00e-01, -6.67e-01, -8.33e-01, -3.33e-01, -5.00e-01, -6.67e-01, -8.33e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +1.67e-01, -2.78e-17, -1.67e-01, -3.33e-01, +1.67e-01, -2.78e-17, -1.67e-01, -3.33e-01, ],
    [+3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +1.67e-01, -5.55e-17, +3.33e-01, +1.67e-01, -5.55e-17, -1.67e-01, +1.67e-01, -2.78e-17, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, -5.55e-17, +1.67e-01, -5.55e-17, +3.33e-01, +1.67e-01, -5.55e-17, -1.67e-01, +1.67e-01, -2.78e-17, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, -5.55e-17, ],
    [+3.33e-01, +1.67e-01, -2.78e-17, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +3.33e-01, +1.67e-01, -2.78e-17, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, -2.78e-17, -1.67e-01, -3.33e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +1.67e-01, -2.78e-17, -1.67e-01, -3.33e-01, ],
    [+3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, +1.67e-01, -1.67e-01, +1.67e-01, -1.67e-01, +3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, +1.67e-01, -1.67e-01, +1.67e-01, -1.67e-01, +8.33e-01, +5.00e-01, +8.33e-01, +5.00e-01, +6.67e-01, +3.33e-01, +6.67e-01, +3.33e-01, +8.33e-01, +5.00e-01, +8.33e-01, +5.00e-01, +6.67e-01, +3.33e-01, +6.67e-01, +3.33e-01, +3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, +1.67e-01, -1.67e-01, +1.67e-01, -1.67e-01, +3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, +1.67e-01, -1.67e-01, +1.67e-01, -1.67e-01, +8.33e-01, +5.00e-01, +8.33e-01, +5.00e-01, +6.67e-01, +3.33e-01, +6.67e-01, +3.33e-01, +8.33e-01, +5.00e-01, +8.33e-01, +5.00e-01, +6.67e-01, +3.33e-01, +6.67e-01, +3.33e-01, ],
    [-3.33e-01, -3.33e-01, +0.00e+00, +0.00e+00, +1.67e-01, +1.67e-01, +5.00e-01, +5.00e-01, -1.67e-01, -1.67e-01, +1.67e-01, +1.67e-01, +3.33e-01, +3.33e-01, +6.67e-01, +6.67e-01, +1.67e-01, +1.67e-01, +5.00e-01, +5.00e-01, +6.67e-01, +6.67e-01, +1.00e+00, +1.00e+00, +3.33e-01, +3.33e-01, +6.67e-01, +6.67e-01, +8.33e-01, +8.33e-01, +1.17e+00, +1.17e+00, -5.00e-01, -5.00e-01, -1.67e-01, -1.67e-01, +2.78e-17, +2.78e-17, +3.33e-01, +3.33e-01, -3.33e-01, -3.33e-01, +1.11e-16, +1.11e-16, +1.67e-01, +1.67e-01, +5.00e-01, +5.00e-01, +2.78e-17, +2.78e-17, +3.33e-01, +3.33e-01, +5.00e-01, +5.00e-01, +8.33e-01, +8.33e-01, +1.67e-01, +1.67e-01, +5.00e-01, +5.00e-01, +6.67e-01, +6.67e-01, +1.00e+00, +1.00e+00, ],
    [-3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, +3.33e-01, +3.33e-01, +1.67e-01, +1.67e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +6.67e-01, +6.67e-01, +5.00e-01, +5.00e-01, +3.33e-01, +3.33e-01, +1.67e-01, +1.67e-01, +8.33e-01, +8.33e-01, +6.67e-01, +6.67e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, +3.33e-01, +3.33e-01, +1.67e-01, +1.67e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +6.67e-01, +6.67e-01, +5.00e-01, +5.00e-01, +3.33e-01, +3.33e-01, +1.67e-01, +1.67e-01, +8.33e-01, +8.33e-01, +6.67e-01, +6.67e-01, ],
    [-3.33e-01, -5.00e-01, -1.67e-01, -3.33e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, +1.17e+00, +1.00e+00, +1.33e+00, +1.17e+00, +8.33e-01, +6.67e-01, +1.00e+00, +8.33e-01, +1.33e+00, +1.17e+00, +1.50e+00, +1.33e+00, -3.33e-01, -5.00e-01, -1.67e-01, -3.33e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, +1.17e+00, +1.00e+00, +1.33e+00, +1.17e+00, +8.33e-01, +6.67e-01, +1.00e+00, +8.33e-01, +1.33e+00, +1.17e+00, +1.50e+00, +1.33e+00, ],
    [-3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, -6.67e-01, -6.67e-01, -8.33e-01, -8.33e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, +6.67e-01, +6.67e-01, +5.00e-01, +5.00e-01, -1.67e-01, -1.67e-01, -3.33e-01, -3.33e-01, +3.33e-01, +3.33e-01, +1.67e-01, +1.67e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, +2.78e-17, +2.78e-17, -1.67e-01, -1.67e-01, -8.33e-01, -8.33e-01, -1.00e+00, -1.00e+00, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, +2.78e-17, +2.78e-17, -1.67e-01, -1.67e-01, +5.00e-01, +5.00e-01, +3.33e-01, +3.33e-01, -3.33e-01, -3.33e-01, -5.00e-01, -5.00e-01, +1.67e-01, +1.67e-01, +0.00e+00, +0.00e+00, ],
    [-3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, +1.67e-01, +1.67e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, -1.33e+00, -1.33e+00, -1.67e-01, -1.67e-01, -8.33e-01, -8.33e-01, +1.67e-01, +1.67e-01, -5.00e-01, -5.00e-01, +6.67e-01, +6.67e-01, +0.00e+00, +0.00e+00, -1.67e-01, -1.67e-01, -8.33e-01, -8.33e-01, +3.33e-01, +3.33e-01, -3.33e-01, -3.33e-01, -3.33e-01, -3.33e-01, -1.00e+00, -1.00e+00, +1.67e-01, +1.67e-01, -5.00e-01, -5.00e-01, -6.67e-01, -6.67e-01, -1.33e+00, -1.33e+00, -1.67e-01, -1.67e-01, -8.33e-01, -8.33e-01, +1.67e-01, +1.67e-01, -5.00e-01, -5.00e-01, +6.67e-01, +6.67e-01, -2.78e-17, -2.78e-17, -1.67e-01, -1.67e-01, -8.33e-01, -8.33e-01, +3.33e-01, +3.33e-01, -3.33e-01, -3.33e-01, ],
    [-3.33e-01, -5.00e-01, -6.67e-01, -8.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, -6.67e-01, -8.33e-01, -1.00e+00, -1.17e+00, -1.67e-01, -3.33e-01, -5.00e-01, -6.67e-01, +6.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +1.17e+00, +1.00e+00, +8.33e-01, +6.67e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +8.33e-01, +6.67e-01, +5.00e-01, +3.33e-01, -3.33e-01, -5.00e-01, -6.67e-01, -8.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, -6.67e-01, -8.33e-01, -1.00e+00, -1.17e+00, -1.67e-01, -3.33e-01, -5.00e-01, -6.67e-01, +6.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +1.17e+00, +1.00e+00, +8.33e-01, +6.67e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +8.33e-01, +6.67e-01, +5.00e-01, +3.33e-01, ],
    [+0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +0.00e+00, -1.67e-01, +1.67e-01, +0.00e+00, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, +1.00e+00, +8.33e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, +1.00e+00, +8.33e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, +1.67e-01, +2.78e-17, +3.33e-01, +1.67e-01, -1.67e-01, -3.33e-01, +0.00e+00, -1.67e-01, +1.67e-01, +2.78e-17, +3.33e-01, +1.67e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, +3.33e-01, +1.67e-01, +5.00e-01, +3.33e-01, +6.67e-01, +5.00e-01, +8.33e-01, +6.67e-01, ],
    [+0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +8.33e-01, +6.67e-01, +5.00e-01, +3.33e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +8.33e-01, +6.67e-01, +5.00e-01, +3.33e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +0.00e+00, -1.67e-01, -3.33e-01, -5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, -1.67e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +8.33e-01, +6.67e-01, +5.00e-01, +3.33e-01, +5.00e-01, +3.33e-01, +1.67e-01, +0.00e+00, +8.33e-01, +6.67e-01, +5.00e-01, +3.33e-01, ],
    [+0.00e+00, -3.33e-01, +0.00e+00, -3.33e-01, +3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, +0.00e+00, -3.33e-01, +0.00e+00, -3.33e-01, +3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, +1.00e+00, +6.67e-01, +1.00e+00, +6.67e-01, +1.33e+00, +1.00e+00, +1.33e+00, +1.00e+00, +1.00e+00, +6.67e-01, +1.00e+00, +6.67e-01, +1.33e+00, +1.00e+00, +1.33e+00, +1.00e+00, +0.00e+00, -3.33e-01, +0.00e+00, -3.33e-01, +3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, +0.00e+00, -3.33e-01, +0.00e+00, -3.33e-01, +3.33e-01, +0.00e+00, +3.33e-01, +0.00e+00, +1.00e+00, +6.67e-01, +1.00e+00, +6.67e-01, +1.33e+00, +1.00e+00, +1.33e+00, +1.00e+00, +1.00e+00, +6.67e-01, +1.00e+00, +6.67e-01, +1.33e+00, +1.00e+00, +1.33e+00, +1.00e+00, ],
])

#################

def game_normalize(regrets):
    # normalize regrets to get strategy

    reg_pos = np.maximum(0.0, regrets)
    if reg_pos.sum() < 1e-10:
        return np.ones_like(regrets) / regrets.shape[0]
    else:
        return reg_pos / reg_pos.sum()


def RM(U, max_iter=10000):
    # U: the pay off matrix
    # max_iter: number of iterations

    # record regret
    reg_trajectory = np.zeros((max_iter,))

    regrets_pl1 = np.zeros(U.shape[0])
    regrets_pl2 = np.zeros(U.shape[1])

    x_avg = np.zeros_like(regrets_pl1)
    y_avg = np.zeros_like(regrets_pl2)

    for t in range(max_iter):
        x = game_normalize(regrets_pl1)
        y = game_normalize(regrets_pl2)

        ev = x @ U @ y
        regrets_pl1 += U @ y - ev
        regrets_pl2 += -U.T @ x + ev

        x_avg = (x_avg * t + x) / (t + 1)
        y_avg = (y_avg * t + y) / (t + 1)

        reg_trajectory[t] = np.max(regrets_pl1)

    print("The value of the game is {}".format(x_avg @ U @ y_avg))

    return reg_trajectory

def RMP(U, max_iter):
    # U: the pay off matrix
    # max_iter: number of iterations

    # record regret
    reg_trajectory_x = np.zeros((max_iter,))
    reg_trajectory_y = np.zeros((max_iter,))

    regrets_pl1 = np.zeros(U.shape[0])
    regrets_pl2 = np.zeros(U.shape[1])

    x_avg = np.zeros_like(regrets_pl1)
    y_avg = np.zeros_like(regrets_pl2)

    rx = np.zeros(U.shape[0])
    ry = np.zeros(U.shape[1])
    x = game_normalize(rx)
    y = game_normalize(ry)
    eta = 1

    for t in range(max_iter):
        lx = -U @ y
        rx = rx - eta * (lx - lx.T @ x)
        rx[rx < 0] = 0

        ly = U.T @ x
        ry = ry - eta * (ly - ly.T @ y)
        ry[ry < 0] = 0

        x = game_normalize(rx)
        y = game_normalize(ry)

        ev = x @ U @ y
        regrets_pl1 += U @ y - ev
        regrets_pl2 += -U.T @ x + ev

        x_avg = (x_avg * t + x) / (t + 1)
        y_avg = (y_avg * t + y) / (t + 1)

        reg_trajectory_x[t] = np.max(regrets_pl1)

    print("The value of the game is {}".format(x_avg @ U @ y_avg))

    return reg_trajectory_x

def demo_rps():
    reg_trajectory1 = RM(U_rps, max_iter=10000)
    reg_trajectory2 = RMP(U_rps, max_iter=10000)

    fig, ax = plt.subplots()

    # Plot the data
    ax.plot(reg_trajectory1, linewidth=2, label='RM -- rps')
    ax.plot(reg_trajectory2, linewidth=2, label='RMP -- rps')

    # Set labels and title
    ax.set_xlabel('Number of iteration')
    ax.set_ylabel('Regret')
    ax.set_title('Regret v.s. Number of iteration')

    # Add a legend
    ax.legend()

    # Display the plot
    plt.show()

def demo_rungh():
    reg_trajectory5 = RM(U_kuhn, max_iter=10000)
    reg_trajectory6 = RMP(U_kuhn, max_iter=10000)

    fig, ax = plt.subplots()

    # Plot the data
    ax.plot(reg_trajectory5, linewidth=2, label='RM -- kuhn')
    ax.plot(reg_trajectory6, linewidth=2, label='RMP -- kuhn')
    # Set labels and title
    ax.set_xlabel('Number of iteration')
    ax.set_ylabel('Regret')
    ax.set_title('Regret v.s. Number of iteration')

    # Add a legend
    ax.legend()

    # Display the plot
    plt.show()

if __name__=="__main__":
    demo_rungh()
